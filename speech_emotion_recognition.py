# -*- coding: utf-8 -*-
"""Speech Emotion Recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e1wtmmLOy_61qc9fFBRmGnBPHSXj5lRX

Coderscave Speech Emotion Recognition
"""

!pip install librosa
!pip install tensorflow

import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.utils import to_categorical
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

np.random.seed(42)

num_samples = 1000
num_features = 20
happy_data = np.random.normal(0, 1, size=(num_samples, num_features))
sad_data = np.random.normal(2, 1, size=(num_samples, num_features))

happy_labels = np.zeros(num_samples)
sad_labels = np.ones(num_samples)

X = np.concatenate([happy_data, sad_data], axis=0)
y = np.concatenate([happy_labels, sad_labels], axis=0)

y_onehot = to_categorical(y)

X_train, X_test, y_train, y_test = train_test_split(X, y_onehot, test_size=0.2, random_state=42)

"""Building a simple neural network model

"""

model = models.Sequential([
    layers.Dense(256, activation='relu', input_shape=(num_features,)),
    layers.Dropout(0.5),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(2, activation='softmax')  # Two classes: happy and sad
])

model.compile(
    loss='categorical_crossentropy',
    optimizer='adam',
    metrics=['accuracy']
)

"""Training the model"""

history = model.fit(
    X_train, y_train,
    epochs=50,
    batch_size=32,
    validation_data=(X_test, y_test)
)

"""Evaluating the model"""

loss, accuracy = model.evaluate(X_test, y_test)
print(f'Test Loss: {loss:.4f}, Test Accuracy: {accuracy:.4f}')

plt.figure(figsize=(12, 6))
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

"""Making Predictions using the model"""

new_audio_sample = np.random.rand(1, num_features)
predicted_probabilities = model.predict(new_audio_sample)

predicted_class = np.argmax(predicted_probabilities)
emotion_mapping = {0: 'happy', 1: 'sad', 2: 'angry', 3: 'fear'}
predicted_emotion = emotion_mapping[predicted_class]

print('Predicted Emotion: ',predicted_emotion)